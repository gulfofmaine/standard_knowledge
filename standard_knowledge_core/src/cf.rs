use crate::standard::Standard;

// Loads CF HashMap functions that are generated by build.rs.
// Update the standards from source xmls with `uv run --script utils/update_standards.py`
include!(concat!(env!("OUT_DIR"), "/build_standards.rs"));

/// Returns a HashMap of standard names: vector of aliases
pub fn aliases_by_standard_name() -> HashMap<&'static str, Vec<&'static str>> {
    let aliases = generated_cf_aliases();

    let mut standards = HashMap::new();

    for (alias, standard_name) in aliases {
        standards
            .entry(standard_name)
            .or_insert_with(Vec::new)
            .push(alias);
    }

    standards
}

/// Returns a HashMap of standard names to Standard
pub fn cf_standards() -> HashMap<&'static str, Standard> {
    println!("Before load cf standard hashmap");
    let standard_map = generated_cf_standard_hashmap();
    let alias_map = aliases_by_standard_name();

    let mut standards = HashMap::new();

    for (name, values) in standard_map {
        let unit = values["unit"].to_string();
        let description = values["description"].to_string();
        let empty_vec = Vec::new();
        let aliases = alias_map.get(name).unwrap_or(&empty_vec);
        let aliases = aliases.iter().map(|alias| alias.to_string()).collect();

        standards.insert(
            name,
            Standard {
                name: name.to_string(),
                unit,
                description,
                aliases,
                ..Standard::default()
            },
        );
    }

    standards
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_load_cf_aliases() {
        let aliases = aliases_by_standard_name();

        let pressure = aliases["air_pressure_at_mean_sea_level"].clone();
        assert!(
            pressure.contains(&"air_pressure_at_sea_level"),
            "The standard `air_pressure_at_mean_sea_level` should contain the alias `air_pressure_at_sea_level`"
        )
    }

    #[test]
    fn load_cf_standards() {
        println!("About to call cf_standards");
        // let standards = cf_standards();
        let standards = generated_cf_standard_hashmap();
        println!("cf_standards returned");
        // println!("Loading standards");

        // let loaded_standards = cf_standards();

        // println!("Loaded standards");

        // let pressure = standards["air_pressure_at_mean_sea_level"].clone();

        // println!("Selected pressure");

        // assert_eq!(pressure.name, "air_pressure_at_mean_sea_level");

        // println!("Name is correct");

        // assert!(
        //     pressure
        //         .aliases
        //         .contains(&"air_pressure_at_sea_level".to_string()),
        //     "The standard `air_pressure_at_mean_sea_level` should contain the alias `air_pressure_at_sea_level`"
        // )
    }
}
